name: AArch64 Compile and Build (Adjusted for Consistency)

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64-unknown-linux-gnu] # Adjust if you need x86_64 as well

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      # Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Build frontend
      - name: Build
        run: pnpm run build

      # Set up Rust toolchain and target for ./src-tauri
      - name: Setup Rust toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Install target for ${{ matrix.target }}
        run: rustup target add ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-app-${{ matrix.target }}

      # Install dependencies for cross-compilation
      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
          libstdc++-11-dev-arm64-cross \
          zlib1g-dev \
          libsnappy-dev \
          libbz2-dev \
          liblz4-dev \
          libzstd-dev \
          clang \
          libc6-dev-arm64-cross \
          libgtk-3-dev \
          libgdk-pixbuf2.0-dev \
          libpango1.0-dev \
          libcairo2-dev \
          libsoup2.4-dev \
          libjavascriptcoregtk-4.0-dev \
          libwebkit2gtk-4.0-dev

      - name: Download and set up OpenSSL for cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          wget https://www.openssl.org/source/openssl-1.1.1k.tar.gz
          tar -xzf openssl-1.1.1k.tar.gz
          cd openssl-1.1.1k
          ./Configure linux-aarch64 --prefix=$HOME/openssl-aarch64 --cross-compile-prefix=aarch64-linux-gnu-
          make -j$(nproc)
          make install_sw
          cd ..
          echo "OPENSSL_DIR=$HOME/openssl-aarch64" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$HOME/openssl-aarch64/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$HOME/openssl-aarch64/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$HOME/openssl-aarch64/lib/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV

      - name: Install and configure Zig for aarch64 cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          wget https://ziglang.org/download/0.11.0/zig-linux-x86_64-0.11.0.tar.xz
          tar -xf zig-linux-x86_64-0.11.0.tar.xz
          echo "ZIG_PATH=$PWD/zig-linux-x86_64-0.11.0/zig" >> $GITHUB_ENV
          echo "$PWD/zig-linux-x86_64-0.11.0" >> $GITHUB_PATH
          zig-linux-x86_64-0.11.0/zig version
          echo "CARGO_ZIGBUILD_ZIG=$PWD/zig-linux-x86_64-0.11.0/zig" >> $GITHUB_ENV
          cargo install cargo-zigbuild

      - name: Build the Rust app in src-tauri
        env:
          C_INCLUDE_PATH: /usr/lib/gcc-cross/aarch64-linux-gnu/11/include
          CXX_INCLUDE_PATH: /usr/lib/gcc-cross/aarch64-linux-gnu/11/include/c++
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}
          PKG_CONFIG_ALLOW_CROSS: ${{ env.PKG_CONFIG_ALLOW_CROSS }}
          PKG_CONFIG_SYSROOT_DIR: ${{ env.PKG_CONFIG_SYSROOT_DIR }}
          OPENSSL_STATIC: ${{ env.OPENSSL_STATIC }}
          RUSTFLAGS: "-C link-arg=-lstdc++ -C link-arg=-lpthread -C link-arg=-lc"
        run: |
          cd src-tauri
          cargo zigbuild --release --target ${{ matrix.target }}

      - name: Get application name and version
        id: get_info
        run: |
          cd src-tauri
          APP_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "src-tauri") | .name')
          APP_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "src-tauri") | .version')
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      - name: Upload Debian Bundle
        uses: actions/upload-artifact@v3
        with:
          name: Debian Bundle
          path: src-tauri/target/${{ matrix.target }}/release/${{ env.APP_NAME }}_${{ env.APP_VERSION }}_arm64.deb

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: '${{ env.APP_NAME }} v${{ env.APP_VERSION }}'
          body: 'See the attached Debian bundle for installation.'
          draft: false
          prerelease: false
          files: |
            src-tauri/target/${{ matrix.target }}/release/${{ env.APP_NAME }}_${{ env.APP_VERSION }}_arm64.deb
